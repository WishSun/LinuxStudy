
标准输入(键盘):  stdin       0      STDIN_FILENO
标准输出(屏幕):  stdout      1      STDOUT_FILENO
标准错误输出(屏幕): stderr   2      STDERR_FILENO


标准输入重定向:   <  或  <<
标准输出重定向:   >  或  >>
标准错误输出重定向:   2>  或  2>>

>> : 将内容添加到文件的最后一行
>  : 将文件清空，再将内容写进文件

数据统计命令:  wc

/dev/null : 黑洞文件，写到这个里面的内容就相当于丢了。而且不可恢复

&1 : 将其他内容重定向到标准输出时，需要加上&

cat tmp.txt  >>/dev/null  2>>&1  : 将cat tmp.txt 执行的正确信息和错误信息都写到/dev/null中
cat tmp.txt  2>>&1  >>/dev/null : 将cat tmp.txt 执行的错误信息重定向到标准输出(屏幕),将正确信息写到/dev/null中

Linux文件操作: <unistd.h> <fcntl.h> 

mode_t  umask( mode_t mask );  //设置当前进程创建文件权限的掩码
返回值 : 设置之前的掩码值


打开文件-------------------------------------------------------------------
int open(const char *pathname,   //文件名加路径，如果未指定路径，默认是当前目录
         int flags,              //以什么方式打开
         mode_t mode);           //如果文件不存在，创建文件时指定权限

第二个参数取值:
O_RDONLY: 只读
O_WRONLY: 只写
O_RDWR  : 可读可写
上面三个互斥

O_CREAT : 创建文件,需要有第三个参数指定权限
O_EXCL  : 指定了O_CREAT, 如果文件存在则报错

O_APPEND: 追加模式打开,本质是 : 写文件时，将文件读写指针跳转到文件末尾
O_TRUNC : 打开时并清空文件



读文件:-------------------------------------------------------------------
ssize_t read(int fd,         //文件描述符
             void *buf,      //存放读取字符的位置指针
             size_t count);  //请求读取的字节数

返回值: 实际读取的字节数



写文件:-------------------------------------------------------------------
ssize_t write(int fd,   //文件描述符
             const void *buf,   //写进文件的字符串指针
             size_t count);     //请求写入文件的字节数

返回值: 实际写入的字节数



off_t lseek(int fd,         //文件描述符
            off_t offset,   //偏移量:  整数则向后偏移； 负数向后偏移
            int whence);    //偏移基准位置  SEEK_SET : 文件开头   SEEK_CUR : 当前位置  SEEK_END : 文件末尾
返回值: 文件指针当前位置相对于文件起始位置的偏移量



获取文件的属性信息: -----------------------------------------------------
int stat(const char *path,  //文件路径
         struct stat *buf); //存储文件属性信息的结构体

int fstat(int fd,           //文件描述符
         struct stat *buf); //存储文件属性信息的结构体



文件截断:----------------------------------------------------------------
int ftruncate(int fd,         //文件描述符
              off_t length);  //截断后的大小, 保留的是文件开始的内容


判断文件是否存在、是否可读、是否可写和是否可执行------------------------
int access(const char *pathname, //文件名
           int mode);            //判断目标

第二个参数:
F_OK : 存在
R_OK : 可读
W_OK : 可写
X_OK : 可执行

返回值:  是 返回 0
         否 返回 -1


删除文件(本质是对文件的链接数 -1 ,如果链接数是 1，则删除文件)------------
int unlink(const char * path);


将文件流指针转为文件描述符-----------------------------------------------
int fileno(FILE *stream);



将文件描述符转为文件流指针----------------------------------------------
FILE *fdopen(int fd,             //文件描述符
             const char *mode);  //打开文件时，参数中的mode选项之一
第二个参数:
r r+   w w+   a a+

关闭 fclose(FILE *);


Linux 目录操作:

打开目录文件

